
import { GoogleGenAI, Modality } from "@google/genai";

const fileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => {
            const result = reader.result as string;
            resolve(result.split(',')[1]);
        };
        reader.onerror = (error) => reject(error);
    });
};

export const transformImage = async (file: File): Promise<string> => {
    try {
        if (!process.env.API_KEY) {
            throw new Error("API_KEY environment variable not set");
        }
        const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
        const base64Data = await fileToBase64(file);

        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image',
            contents: {
                parts: [
                    {
                        inlineData: {
                            data: base64Data,
                            mimeType: file.type,
                        },
                    },
                    {
                        text: "This is a product photo for a Bangladeshi e-commerce website. Please transform it into a professional, high-quality studio image. The product must be the main focus, placed on a pure white background (#FFFFFF). Enhance the lighting to be bright and even, remove any shadows or reflections that are not part of the product itself. Correct colors to be vibrant and true-to-life. Remove any distracting background elements completely. The final image should be clean, sharp, and look like it was taken in a professional photo studio.",
                    },
                ],
            },
            config: {
                responseModalities: [Modality.IMAGE],
            },
        });
        
        for (const part of response.candidates[0].content.parts) {
            if (part.inlineData) {
                const base64ImageBytes: string = part.inlineData.data;
                return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
            }
        }

        throw new Error("No image was generated by the API.");

    } catch (error) {
        console.error("Error transforming image:", error);
        if (error instanceof Error) {
            throw new Error(`Failed to transform image: ${error.message}`);
        }
        throw new Error("An unknown error occurred during image transformation.");
    }
};
